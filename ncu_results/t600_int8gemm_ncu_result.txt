==PROF== Connected to process 152090 (/home/denizdius/CENG443_project/src/int8gemm_sm75)
==PROF== Profiling "int8gemm_tensor_core" - 0: 0%....50%....100% - 35 passes
==PROF== Profiling "int8gemm_normal" - 1: 0%....50%....100% - 35 passes

=== Tensor Core INT8 GEMM Performance ===

=== Regular INT8 GEMM Performance ===

=== Performance Comparison ===
Matrix size: 1024x1024
Tensor Core kernel time: 814.916 ms
Regular kernel time: 2667.580 ms
Speedup: 3.27x

=== Result Verification ===
Tensor Core C[0][0] = 1024
Regular C[0][0] = 1024
Expected value = 1024
==PROF== Disconnected from process 152090
[152090] int8gemm_sm75@127.0.0.1
  int8gemm_tensor_core(const signed char *, const signed char *, int *) (64, 64, 1)x(32, 1, 1), Context 1, Stream 7, Device 0, CC 7.5
    Section: GPU Speed Of Light Throughput
    ----------------------- ------------- ------------
    Metric Name               Metric Unit Metric Value
    ----------------------- ------------- ------------
    DRAM Frequency          cycle/nsecond         5.00
    SM Frequency            cycle/usecond       929.94
    Elapsed Cycles                  cycle    3,013,584
    Memory Throughput                   %        30.22
    DRAM Throughput                     %         8.81
    Duration                      msecond         3.24
    L1/TEX Cache Throughput             %        60.43
    L2 Cache Throughput                 %        26.76
    SM Active Cycles                cycle 2,997,961.36
    Compute (SM) Throughput             %        79.53
    ----------------------- ------------- ------------

    OPT   Compute is more heavily utilized than Memory: Look at the Compute Workload Analysis section to see what the   
          compute pipelines are spending their time doing. Also, consider whether any computation is redundant and      
          could be reduced or moved to look-up tables.                                                                  

    Section: GPU Speed Of Light Roofline Chart
    INF   The ratio of peak float (fp32) to double (fp64) performance on this device is 32:1. The kernel achieved 0% of 
          this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide       
          (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline      
          analysis.                                                                                                     

    Section: Compute Workload Analysis
    -------------------- ----------- ------------
    Metric Name          Metric Unit Metric Value
    -------------------- ----------- ------------
    Executed Ipc Active   inst/cycle         0.13
    Executed Ipc Elapsed  inst/cycle         0.13
    Issue Slots Busy               %         3.22
    Issued Ipc Active     inst/cycle         0.13
    SM Busy                        %        79.95
    -------------------- ----------- ------------

    OPT   Tensor is the highest-utilized pipeline (79.9%) based on active cycles, taking into account the rates of its  
          different instructions. It is the logical aggregation of individual tensor pipelines. It's dominated by its   
          Tensor (FP) sub-pipeline. The pipeline is well-utilized, but might become a bottleneck if more work is        
          added. Based on the number of executed instructions, the highest utilized pipeline (159.9%) is Tensor (INT).  
          It executes 4/8-bit integer tensor operations. Comparing the two, the overall pipeline utilization appears    
          to be caused by frequent, low-latency instructions. See the Kernel Profiling Guide                            
          (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-decoder) or hover over the          
          pipeline name to understand the workloads handled by each pipeline. The Instruction Statistics section shows  
          the mix of executed instructions in this kernel. Check the Warp State Statistics section for which reasons    
          cause warps to stall.                                                                                         

    Section: Memory Workload Analysis
    ----------------- ------------ ------------
    Metric Name        Metric Unit Metric Value
    ----------------- ------------ ------------
    Memory Throughput Gbyte/second        14.08
    Mem Busy                     %        30.22
    Max Bandwidth                %        26.42
    L1/TEX Hit Rate              %        52.88
    L2 Hit Rate                  %        89.17
    Mem Pipes Busy               %        12.56
    ----------------- ------------ ------------

    Section: Memory Workload Analysis Chart
    WRN   The optional metric lts__average_gcomp_input_sector_success_rate.pct could not be found. Collecting it as an  
          additional metric could enable the rule to provide more guidance.                                             

    Section: Memory Workload Analysis Tables
    OPT   Est. Speedup: 1.212%                                                                                          
          The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses    
          1.6 bytes per thread per memory request; but the address pattern, possibly caused by the stride between       
          threads, results in 4.7 sectors per request, or 4.7*32 = 151.4 bytes of cache data transfers per request.     
          The optimal thread address pattern for 1.6 byte accesses would result in 1.6*32 = 52.5 bytes of cache data    
          transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for             
          uncoalesced global loads.                                                                                     
    ----- --------------------------------------------------------------------------------------------------------------
    OPT   Est. Speedup: 1.474%                                                                                          
          The memory access pattern for global stores in L1TEX might not be optimal. On average, this kernel accesses   
          1.6 bytes per thread per memory request; but the address pattern, possibly caused by the stride between       
          threads, results in 8.0 sectors per request, or 8.0*32 = 256.0 bytes of cache data transfers per request.     
          The optimal thread address pattern for 1.6 byte accesses would result in 1.6*32 = 52.5 bytes of cache data    
          transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for             
          uncoalesced global stores.                                                                                    
    ----- --------------------------------------------------------------------------------------------------------------
    OPT   Est. Speedup: 19.63%                                                                                          
          The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to   
          L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only  
          accesses an average of 1.0 sectors out of the possible 4 sectors per cache line. Check the Source Counters    
          section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory         
          request.                                                                                                      
    ----- --------------------------------------------------------------------------------------------------------------
    OPT   Est. Speedup: 0.4292%                                                                                         
          The memory access pattern for stores from L1TEX to L2 is not optimal. The granularity of an L1TEX request to  
          L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only  
          accesses an average of 1.0 sectors out of the possible 4 sectors per cache line. Check the Source Counters    
          section for uncoalesced stores and try to minimize how many cache lines need to be accessed per memory        
          request.                                                                                                      

    Section: Scheduler Statistics
    ---------------------------- ----------- ------------
    Metric Name                  Metric Unit Metric Value
    ---------------------------- ----------- ------------
    One or More Eligible                   %         3.23
    Issued Warp Per Scheduler                        0.03
    No Eligible                            %        96.77
    Active Warps Per Scheduler          warp         3.96
    Eligible Warps Per Scheduler        warp         0.04
    ---------------------------- ----------- ------------

    OPT   Est. Local Speedup: 20.47%                                                                                    
          Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only      
          issues an instruction every 31.0 cycles. This might leave hardware resources underutilized and may lead to    
          less optimal performance. Out of the maximum of 8 warps per scheduler, this kernel allocates an average of    
          3.96 active warps per scheduler, but only an average of 0.04 warps were eligible per cycle. Eligible warps    
          are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible   
          warp results in no instruction being issued and the issue slot remains unused. To increase the number of      
          eligible warps, avoid possible load imbalances due to highly different execution durations per warp.          
          Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too.            

    Section: Warp State Statistics
    ---------------------------------------- ----------- ------------
    Metric Name                              Metric Unit Metric Value
    ---------------------------------------- ----------- ------------
    Warp Cycles Per Issued Instruction             cycle       122.67
    Warp Cycles Per Executed Instruction           cycle       122.70
    Avg. Active Threads Per Warp                                   32
    Avg. Not Predicated Off Threads Per Warp                       32
    ---------------------------------------- ----------- ------------

    OPT   Est. Speedup: 20.47%                                                                                          
          On average, each warp of this kernel spends 61.5 cycles being stalled waiting for a scoreboard dependency on  
          a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited     
          upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the        
          memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by        
          increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently     
          used data to shared memory. This stall type represents about 50.1% of the total average of 122.7 cycles       
          between issuing two instructions.                                                                             
    ----- --------------------------------------------------------------------------------------------------------------
    OPT   Est. Speedup: 20.47%                                                                                          
          On average, each warp of this kernel spends 58.1 cycles being stalled waiting for the L1 instruction queue    
          for texture operations to be not full. This stall reason is high in cases of extreme utilization of the       
          L1TEX pipeline. Try issuing fewer texture fetches, surface loads, surface stores, or decoupled math           
          operations. If applicable, consider combining multiple lower-width memory operations into fewer wider memory  
          operations and try interleaving memory operations and math instructions. Consider converting texture lookups  
          or surface loads into global memory lookups. Texture can accept four threads' requests per cycle, whereas     
          global accepts 32 threads. This stall type represents about 47.4% of the total average of 122.7 cycles        
          between issuing two instructions.                                                                             
    ----- --------------------------------------------------------------------------------------------------------------
    INF   Check the Warp Stall Sampling (All Samples) table for the top stall locations in your source based on         
          sampling data. The Kernel Profiling Guide                                                                     
          (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details    
          on each stall reason.                                                                                         

    Section: Instruction Statistics
    ---------------------------------------- ----------- ------------
    Metric Name                              Metric Unit Metric Value
    ---------------------------------------- ----------- ------------
    Avg. Executed Instructions Per Scheduler        inst    96,548.57
    Executed Instructions                           inst    5,406,720
    Avg. Issued Instructions Per Scheduler          inst    96,566.93
    Issued Instructions                             inst    5,407,748
    ---------------------------------------- ----------- ------------

    Section: Launch Statistics
    -------------------------------- --------------- ---------------
    Metric Name                          Metric Unit    Metric Value
    -------------------------------- --------------- ---------------
    Block Size                                                    32
    Function Cache Configuration                     CachePreferNone
    Grid Size                                                  4,096
    Registers Per Thread             register/thread              64
    Shared Memory Configuration Size           Kbyte           32.77
    Driver Shared Memory Per Block        byte/block               0
    Dynamic Shared Memory Per Block       byte/block               0
    Static Shared Memory Per Block        byte/block               0
    Threads                                   thread         131,072
    Waves Per SM                                               18.29
    -------------------------------- --------------- ---------------

    Section: Occupancy
    ------------------------------- ----------- ------------
    Metric Name                     Metric Unit Metric Value
    ------------------------------- ----------- ------------
    Block Limit SM                        block           16
    Block Limit Registers                 block           32
    Block Limit Shared Mem                block           16
    Block Limit Warps                     block           32
    Theoretical Active Warps per SM        warp           16
    Theoretical Occupancy                     %           50
    Achieved Occupancy                        %        49.40
    Achieved Active Warps Per SM           warp        15.81
    ------------------------------- ----------- ------------

    OPT   Est. Speedup: 20.47%                                                                                          
          The 4.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the       
          hardware maximum of 8. This kernel's theoretical occupancy (50.0%) is limited by the number of blocks that    
          can fit on the SM. This kernel's theoretical occupancy (50.0%) is limited by the required amount of shared    
          memory.                                                                                                       

    Section: Source Counters
    ------------------------- ----------- ------------
    Metric Name               Metric Unit Metric Value
    ------------------------- ----------- ------------
    Branch Instructions Ratio           %         0.00
    Branch Instructions              inst        4,096
    Branch Efficiency                   %            0
    Avg. Divergent Branches                          0
    ------------------------- ----------- ------------

    OPT   Est. Speedup: 65.65%                                                                                          
          This kernel has uncoalesced global accesses resulting in a total of 8388608 excessive sectors (66% of the     
          total 12713984 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source       
          locations. The CUDA Programming Guide                                                                         
          (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) has additional      
          information on reducing uncoalesced device memory accesses.                                                   

  int8gemm_normal(const signed char *, const signed char *, int *) (64, 64, 1)x(16, 16, 1), Context 1, Stream 7, Device 0, CC 7.5
    Section: GPU Speed Of Light Throughput
    ----------------------- ------------- -------------
    Metric Name               Metric Unit  Metric Value
    ----------------------- ------------- -------------
    DRAM Frequency          cycle/nsecond          4.99
    SM Frequency            cycle/usecond        928.92
    Elapsed Cycles                  cycle    15,029,117
    Memory Throughput                   %         63.88
    DRAM Throughput                     %          2.11
    Duration                      msecond         16.18
    L1/TEX Cache Throughput             %         95.83
    L2 Cache Throughput                 %          5.55
    SM Active Cycles                cycle 15,021,948.79
    Compute (SM) Throughput             %         63.88
    ----------------------- ------------- -------------

    INF   Compute and Memory are well-balanced: To reduce runtime, both computation and memory traffic must be reduced. 
          Check both the Compute Workload Analysis and Memory Workload Analysis sections.                               

    Section: GPU Speed Of Light Roofline Chart
    INF   The ratio of peak float (fp32) to double (fp64) performance on this device is 32:1. The kernel achieved 0% of 
          this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide       
          (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline      
          analysis.                                                                                                     

    Section: Compute Workload Analysis
    -------------------- ----------- ------------
    Metric Name          Metric Unit Metric Value
    -------------------- ----------- ------------
    Executed Ipc Active   inst/cycle         0.69
    Executed Ipc Elapsed  inst/cycle         0.69
    Issue Slots Busy               %        17.30
    Issued Ipc Active     inst/cycle         0.69
    SM Busy                        %        21.33
    -------------------- ----------- ------------

    OPT   Est. Local Speedup: 85.48%                                                                                    
          All compute pipelines are under-utilized. Either this kernel is very small or it doesn't issue enough warps   
          per scheduler. Check the Launch Statistics and Scheduler Statistics sections for further details.             

    Section: Memory Workload Analysis
    ----------------- ------------ ------------
    Metric Name        Metric Unit Metric Value
    ----------------- ------------ ------------
    Memory Throughput Gbyte/second         3.37
    Mem Busy                     %        47.91
    Max Bandwidth                %        63.88
    L1/TEX Hit Rate              %        93.70
    L2 Hit Rate                  %        87.56
    Mem Pipes Busy               %        63.88
    ----------------- ------------ ------------

    Section: Memory Workload Analysis Chart
    WRN   The optional metric lts__average_gcomp_input_sector_success_rate.pct could not be found. Collecting it as an  
          additional metric could enable the rule to provide more guidance.                                             

    Section: Memory Workload Analysis Tables
    OPT   Est. Speedup: 0.9951%                                                                                         
          The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses    
          1.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between       
          threads, results in 1.5 sectors per request, or 1.5*32 = 48.0 bytes of cache data transfers per request. The  
          optimal thread address pattern for 1.0 byte accesses would result in 1.0*32 = 32.0 bytes of cache data        
          transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for             
          uncoalesced global loads.                                                                                     
    ----- --------------------------------------------------------------------------------------------------------------
    OPT   Est. Speedup: 2.244%                                                                                          
          The memory access pattern for global stores in L1TEX might not be optimal. On average, this kernel accesses   
          1.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between       
          threads, results in 4.0 sectors per request, or 4.0*32 = 128.0 bytes of cache data transfers per request.     
          The optimal thread address pattern for 1.0 byte accesses would result in 1.0*32 = 32.0 bytes of cache data    
          transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for             
          uncoalesced global stores.                                                                                    
    ----- --------------------------------------------------------------------------------------------------------------
    OPT   Est. Speedup: 4.078%                                                                                          
          The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to   
          L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only  
          accesses an average of 1.0 sectors out of the possible 4 sectors per cache line. Check the Source Counters    
          section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory         
          request.                                                                                                      
    ----- --------------------------------------------------------------------------------------------------------------
    OPT   Est. Speedup: 0.05732%                                                                                        
          The memory access pattern for stores from L1TEX to L2 is not optimal. The granularity of an L1TEX request to  
          L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only  
          accesses an average of 2.0 sectors out of the possible 4 sectors per cache line. Check the Source Counters    
          section for uncoalesced stores and try to minimize how many cache lines need to be accessed per memory        
          request.                                                                                                      

    Section: Scheduler Statistics
    ---------------------------- ----------- ------------
    Metric Name                  Metric Unit Metric Value
    ---------------------------- ----------- ------------
    One or More Eligible                   %        17.29
    Issued Warp Per Scheduler                        0.17
    No Eligible                            %        82.71
    Active Warps Per Scheduler          warp         7.96
    Eligible Warps Per Scheduler        warp         0.75
    ---------------------------- ----------- ------------

    OPT   Est. Local Speedup: 36.12%                                                                                    
          Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only      
          issues an instruction every 5.8 cycles. This might leave hardware resources underutilized and may lead to     
          less optimal performance. Out of the maximum of 8 warps per scheduler, this kernel allocates an average of    
          7.96 active warps per scheduler, but only an average of 0.75 warps were eligible per cycle. Eligible warps    
          are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible   
          warp results in no instruction being issued and the issue slot remains unused. To increase the number of      
          eligible warps, avoid possible load imbalances due to highly different execution durations per warp.          
          Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too.            

    Section: Warp State Statistics
    ---------------------------------------- ----------- ------------
    Metric Name                              Metric Unit Metric Value
    ---------------------------------------- ----------- ------------
    Warp Cycles Per Issued Instruction             cycle        46.02
    Warp Cycles Per Executed Instruction           cycle        46.02
    Avg. Active Threads Per Warp                                   32
    Avg. Not Predicated Off Threads Per Warp                    31.99
    ---------------------------------------- ----------- ------------

    OPT   Est. Speedup: 36.12%                                                                                          
          On average, each warp of this kernel spends 36.3 cycles being stalled waiting for the L1 instruction queue    
          for local and global (LG) memory operations to be not full. Typically, this stall occurs only when executing  
          local or global memory instructions extremely frequently. Avoid redundant global memory accesses. Try to      
          avoid using thread-local memory by checking if dynamically indexed arrays are declared in local scope, of if  
          the kernel has excessive register pressure causing by spills. If applicable, consider combining multiple      
          lower-width memory operations into fewer wider memory operations and try interleaving memory operations and   
          math instructions. This stall type represents about 78.8% of the total average of 46.0 cycles between         
          issuing two instructions.                                                                                     
    ----- --------------------------------------------------------------------------------------------------------------
    INF   Check the Warp Stall Sampling (All Samples) table for the top stall locations in your source based on         
          sampling data. The Kernel Profiling Guide                                                                     
          (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details    
          on each stall reason.                                                                                         

    Section: Instruction Statistics
    ---------------------------------------- ----------- ------------
    Metric Name                              Metric Unit Metric Value
    ---------------------------------------- ----------- ------------
    Avg. Executed Instructions Per Scheduler        inst 2,599,204.57
    Executed Instructions                           inst  145,555,456
    Avg. Issued Instructions Per Scheduler          inst 2,599,244.32
    Issued Instructions                             inst  145,557,682
    ---------------------------------------- ----------- ------------

    Section: Launch Statistics
    -------------------------------- --------------- ---------------
    Metric Name                          Metric Unit    Metric Value
    -------------------------------- --------------- ---------------
    Block Size                                                   256
    Function Cache Configuration                     CachePreferNone
    Grid Size                                                  4,096
    Registers Per Thread             register/thread              46
    Shared Memory Configuration Size           Kbyte           32.77
    Driver Shared Memory Per Block        byte/block               0
    Dynamic Shared Memory Per Block       byte/block               0
    Static Shared Memory Per Block        byte/block               0
    Threads                                   thread       1,048,576
    Waves Per SM                                               73.14
    -------------------------------- --------------- ---------------

    Section: Occupancy
    ------------------------------- ----------- ------------
    Metric Name                     Metric Unit Metric Value
    ------------------------------- ----------- ------------
    Block Limit SM                        block           16
    Block Limit Registers                 block            5
    Block Limit Shared Mem                block           16
    Block Limit Warps                     block            4
    Theoretical Active Warps per SM        warp           32
    Theoretical Occupancy                     %          100
    Achieved Occupancy                        %        99.42
    Achieved Active Warps Per SM           warp        31.82
    ------------------------------- ----------- ------------

    Section: Source Counters
    ------------------------- ----------- ------------
    Metric Name               Metric Unit Metric Value
    ------------------------- ----------- ------------
    Branch Instructions Ratio           %         0.01
    Branch Instructions              inst    2,162,688
    Branch Efficiency                   %          100
    Avg. Divergent Branches                          0
    ------------------------- ----------- ------------

    OPT   Est. Speedup: 30.17%                                                                                          
          This kernel has uncoalesced global accesses resulting in a total of 33554432 excessive sectors (33% of the    
          total 100794368 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source      
          locations. The CUDA Programming Guide                                                                         
          (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) has additional      
          information on reducing uncoalesced device memory accesses.                                                   

