==PROF== Connected to process 152214 (/home/denizdius/CENG443_project/src/hgemm_sm75)
==PROF== Profiling "hgemm_tensor_core" - 0: 0%....50%....100% - 35 passes
==PROF== Profiling "hgemm_normal" - 1: 0%....50%....100% - 35 passes

=== Tensor Core HGEMM Performance ===

=== Regular HGEMM Performance ===

=== Performance Comparison ===
Matrix size: 1024x1024
Tensor Core kernel time: 906.313 ms
Regular kernel time: 2472.514 ms
Speedup: 2.73x

=== Result Verification ===
Tensor Core C[0][0] = 1024
Regular C[0][0] = 1024
Expected value = 1024
==PROF== Disconnected from process 152214
[152214] hgemm_sm75@127.0.0.1
  hgemm_tensor_core(const __half *, const __half *, float *) (32, 32, 1)x(64, 2, 1), Context 1, Stream 7, Device 0, CC 7.5
    Section: GPU Speed Of Light Throughput
    ----------------------- ------------- ------------
    Metric Name               Metric Unit Metric Value
    ----------------------- ------------- ------------
    DRAM Frequency          cycle/nsecond         5.00
    SM Frequency            cycle/usecond       929.99
    Elapsed Cycles                  cycle    6,679,968
    Memory Throughput                   %        19.24
    DRAM Throughput                     %         6.45
    Duration                      msecond         7.18
    L1/TEX Cache Throughput             %        38.48
    L2 Cache Throughput                 %        12.45
    SM Active Cycles                cycle 6,601,141.71
    Compute (SM) Throughput             %        35.88
    ----------------------- ------------- ------------

    OPT   This kernel exhibits low compute throughput and memory bandwidth utilization relative to the peak performance 
          of this device. Achieved compute throughput and/or memory bandwidth below 60.0% of peak typically indicate    
          latency issues. Look at Scheduler Statistics and Warp State Statistics for potential reasons.                 

    Section: GPU Speed Of Light Roofline Chart
    INF   The ratio of peak float (fp32) to double (fp64) performance on this device is 32:1. The kernel achieved 0% of 
          this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide       
          (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline      
          analysis.                                                                                                     

    Section: Compute Workload Analysis
    -------------------- ----------- ------------
    Metric Name          Metric Unit Metric Value
    -------------------- ----------- ------------
    Executed Ipc Active   inst/cycle         0.05
    Executed Ipc Elapsed  inst/cycle         0.05
    Issue Slots Busy               %         1.17
    Issued Ipc Active     inst/cycle         0.05
    SM Busy                        %        36.31
    -------------------- ----------- ------------

    INF   Tensor is the highest-utilized pipeline (36.3%) based on active cycles, taking into account the rates of its  
          different instructions. It is the logical aggregation of individual tensor pipelines. It's dominated by its   
          Tensor (FP) sub-pipeline. It is well-utilized, but should not be a bottleneck.                                

    Section: Memory Workload Analysis
    ----------------- ------------ ------------
    Metric Name        Metric Unit Metric Value
    ----------------- ------------ ------------
    Memory Throughput Gbyte/second        10.32
    Mem Busy                     %        19.24
    Max Bandwidth                %        12.29
    L1/TEX Hit Rate              %        62.86
    L2 Hit Rate                  %        83.44
    Mem Pipes Busy               %         8.97
    ----------------- ------------ ------------

    Section: Memory Workload Analysis Chart
    WRN   The optional metric lts__average_gcomp_input_sector_success_rate.pct could not be found. Collecting it as an  
          additional metric could enable the rule to provide more guidance.                                             

    Section: Memory Workload Analysis Tables
    OPT   Est. Speedup: 0.5595%                                                                                         
          The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses    
          4.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between       
          threads, results in 8.0 sectors per request, or 8.0*32 = 255.0 bytes of cache data transfers per request.     
          The optimal thread address pattern for 4.0 byte accesses would result in 4.0*32 = 129.0 bytes of cache data   
          transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for             
          uncoalesced global loads.                                                                                     
    ----- --------------------------------------------------------------------------------------------------------------
    OPT   Est. Speedup: 0.5617%                                                                                         
          The memory access pattern for global stores in L1TEX might not be optimal. On average, this kernel accesses   
          4.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between       
          threads, results in 8.0 sectors per request, or 8.0*32 = 256.0 bytes of cache data transfers per request.     
          The optimal thread address pattern for 4.0 byte accesses would result in 4.0*32 = 129.0 bytes of cache data   
          transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for             
          uncoalesced global stores.                                                                                    
    ----- --------------------------------------------------------------------------------------------------------------
    OPT   Est. Speedup: 9.124%                                                                                          
          The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to   
          L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only  
          accesses an average of 1.0 sectors out of the possible 4 sectors per cache line. Check the Source Counters    
          section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory         
          request.                                                                                                      
    ----- --------------------------------------------------------------------------------------------------------------
    OPT   Est. Speedup: 0.1574%                                                                                         
          The memory access pattern for stores from L1TEX to L2 is not optimal. The granularity of an L1TEX request to  
          L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only  
          accesses an average of 1.6 sectors out of the possible 4 sectors per cache line. Check the Source Counters    
          section for uncoalesced stores and try to minimize how many cache lines need to be accessed per memory        
          request.                                                                                                      

    Section: Scheduler Statistics
    ---------------------------- ----------- ------------
    Metric Name                  Metric Unit Metric Value
    ---------------------------- ----------- ------------
    One or More Eligible                   %         1.17
    Issued Warp Per Scheduler                        0.01
    No Eligible                            %        98.83
    Active Warps Per Scheduler          warp         7.71
    Eligible Warps Per Scheduler        warp         0.02
    ---------------------------- ----------- ------------

    OPT   Est. Local Speedup: 64.12%                                                                                    
          Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only      
          issues an instruction every 85.3 cycles. This might leave hardware resources underutilized and may lead to    
          less optimal performance. Out of the maximum of 8 warps per scheduler, this kernel allocates an average of    
          7.71 active warps per scheduler, but only an average of 0.02 warps were eligible per cycle. Eligible warps    
          are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible   
          warp results in no instruction being issued and the issue slot remains unused. To increase the number of      
          eligible warps, avoid possible load imbalances due to highly different execution durations per warp.          
          Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too.            

    Section: Warp State Statistics
    ---------------------------------------- ----------- ------------
    Metric Name                              Metric Unit Metric Value
    ---------------------------------------- ----------- ------------
    Warp Cycles Per Issued Instruction             cycle       657.67
    Warp Cycles Per Executed Instruction           cycle       657.94
    Avg. Active Threads Per Warp                                   32
    Avg. Not Predicated Off Threads Per Warp                       32
    ---------------------------------------- ----------- ------------

    OPT   Est. Speedup: 55.2%                                                                                           
          On average, each warp of this kernel spends 363.0 cycles being stalled waiting for the L1 instruction queue   
          for texture operations to be not full. This stall reason is high in cases of extreme utilization of the       
          L1TEX pipeline. Try issuing fewer texture fetches, surface loads, surface stores, or decoupled math           
          operations. If applicable, consider combining multiple lower-width memory operations into fewer wider memory  
          operations and try interleaving memory operations and math instructions. Consider converting texture lookups  
          or surface loads into global memory lookups. Texture can accept four threads' requests per cycle, whereas     
          global accepts 32 threads. This stall type represents about 55.2% of the total average of 657.7 cycles        
          between issuing two instructions.                                                                             
    ----- --------------------------------------------------------------------------------------------------------------
    OPT   Est. Speedup: 43.63%                                                                                          
          On average, each warp of this kernel spends 286.9 cycles being stalled waiting for a scoreboard dependency on 
          a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited     
          upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the        
          memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by        
          increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently     
          used data to shared memory. This stall type represents about 43.6% of the total average of 657.7 cycles       
          between issuing two instructions.                                                                             
    ----- --------------------------------------------------------------------------------------------------------------
    INF   Check the Warp Stall Sampling (All Samples) table for the top stall locations in your source based on         
          sampling data. The Kernel Profiling Guide                                                                     
          (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details    
          on each stall reason.                                                                                         

    Section: Instruction Statistics
    ---------------------------------------- ----------- ------------
    Metric Name                              Metric Unit Metric Value
    ---------------------------------------- ----------- ------------
    Avg. Executed Instructions Per Scheduler        inst    77,385.14
    Executed Instructions                           inst    4,333,568
    Avg. Issued Instructions Per Scheduler          inst    77,417.14
    Issued Instructions                             inst    4,335,360
    ---------------------------------------- ----------- ------------

    Section: Launch Statistics
    -------------------------------- --------------- ---------------
    Metric Name                          Metric Unit    Metric Value
    -------------------------------- --------------- ---------------
    Block Size                                                   128
    Function Cache Configuration                     CachePreferNone
    Grid Size                                                  1,024
    Registers Per Thread             register/thread              64
    Shared Memory Configuration Size           Kbyte           32.77
    Driver Shared Memory Per Block        byte/block               0
    Dynamic Shared Memory Per Block       byte/block               0
    Static Shared Memory Per Block        byte/block               0
    Threads                                   thread         131,072
    Waves Per SM                                                9.14
    -------------------------------- --------------- ---------------

    Section: Occupancy
    ------------------------------- ----------- ------------
    Metric Name                     Metric Unit Metric Value
    ------------------------------- ----------- ------------
    Block Limit SM                        block           16
    Block Limit Registers                 block            8
    Block Limit Shared Mem                block           16
    Block Limit Warps                     block            8
    Theoretical Active Warps per SM        warp           32
    Theoretical Occupancy                     %          100
    Achieved Occupancy                        %        96.42
    Achieved Active Warps Per SM           warp        30.85
    ------------------------------- ----------- ------------

    Section: Source Counters
    ------------------------- ----------- ------------
    Metric Name               Metric Unit Metric Value
    ------------------------- ----------- ------------
    Branch Instructions Ratio           %         0.00
    Branch Instructions              inst        4,096
    Branch Efficiency                   %            0
    Avg. Divergent Branches                          0
    ------------------------- ----------- ------------

    OPT   Est. Speedup: 48%                                                                                             
          This kernel has uncoalesced global accesses resulting in a total of 8388608 excessive sectors (50% of the     
          total 16908288 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source       
          locations. The CUDA Programming Guide                                                                         
          (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) has additional      
          information on reducing uncoalesced device memory accesses.                                                   

  hgemm_normal(const __half *, const __half *, float *) (32, 32, 1)x(32, 32, 1), Context 1, Stream 7, Device 0, CC 7.5
    Section: GPU Speed Of Light Throughput
    ----------------------- ------------- -------------
    Metric Name               Metric Unit  Metric Value
    ----------------------- ------------- -------------
    DRAM Frequency          cycle/nsecond          5.00
    SM Frequency            cycle/usecond        930.02
    Elapsed Cycles                  cycle    10,377,776
    Memory Throughput                   %         92.52
    DRAM Throughput                     %          4.14
    Duration                      msecond         11.16
    L1/TEX Cache Throughput             %         93.51
    L2 Cache Throughput                 %          5.86
    SM Active Cycles                cycle 10,267,352.29
    Compute (SM) Throughput             %         92.52
    ----------------------- ------------- -------------

    INF   The kernel is utilizing greater than 80.0% of the available compute or memory performance of the device. To   
          further improve performance, work will likely need to be shifted from the most utilized to another unit.      
          Start by analyzing workloads in the Compute Workload Analysis section.                                        

    Section: GPU Speed Of Light Roofline Chart
    INF   The ratio of peak float (fp32) to double (fp64) performance on this device is 32:1. The kernel achieved 12%   
          of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide    
          (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline      
          analysis.                                                                                                     

    Section: Compute Workload Analysis
    -------------------- ----------- ------------
    Metric Name          Metric Unit Metric Value
    -------------------- ----------- ------------
    Executed Ipc Active   inst/cycle         1.38
    Executed Ipc Elapsed  inst/cycle         1.36
    Issue Slots Busy               %        34.44
    Issued Ipc Active     inst/cycle         1.38
    SM Busy                        %        34.44
    -------------------- ----------- ------------

    INF   Shared is the highest-utilized pipeline (23.8%) based on active cycles, taking into account the rates of its  
          different instructions. It is the logical sum of several other pipelines which can't achieve full             
          utilization on their own. It executes 16-bit floating point and tensor operations. It is well-utilized, but   
          should not be a bottleneck.                                                                                   

    Section: Memory Workload Analysis
    ----------------- ------------ ------------
    Metric Name        Metric Unit Metric Value
    ----------------- ------------ ------------
    Memory Throughput Gbyte/second         6.62
    Mem Busy                     %        46.27
    Max Bandwidth                %        92.52
    L1/TEX Hit Rate              %        95.41
    L2 Hit Rate                  %        53.88
    Mem Pipes Busy               %        92.52
    ----------------- ------------ ------------

    Section: Memory Workload Analysis Chart
    WRN   The optional metric lts__average_gcomp_input_sector_success_rate.pct could not be found. Collecting it as an  
          additional metric could enable the rule to provide more guidance.                                             

    Section: Memory Workload Analysis Tables
    OPT   Est. Speedup: 2.167%                                                                                          
          The memory access pattern for global stores in L1TEX might not be optimal. On average, this kernel accesses   
          2.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between       
          threads, results in 4.0 sectors per request, or 4.0*32 = 128.0 bytes of cache data transfers per request.     
          The optimal thread address pattern for 2.0 byte accesses would result in 2.0*32 = 64.0 bytes of cache data    
          transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for             
          uncoalesced global stores.                                                                                    
    ----- --------------------------------------------------------------------------------------------------------------
    OPT   Est. Speedup: 3.755%                                                                                          
          The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to   
          L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only  
          accesses an average of 1.4 sectors out of the possible 4 sectors per cache line. Check the Source Counters    
          section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory         
          request.                                                                                                      

    Section: Scheduler Statistics
    ---------------------------- ----------- ------------
    Metric Name                  Metric Unit Metric Value
    ---------------------------- ----------- ------------
    One or More Eligible                   %        34.48
    Issued Warp Per Scheduler                        0.34
    No Eligible                            %        65.52
    Active Warps Per Scheduler          warp         7.49
    Eligible Warps Per Scheduler        warp         1.31
    ---------------------------- ----------- ------------

    OPT   Est. Local Speedup: 7.485%                                                                                    
          Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only      
          issues an instruction every 2.9 cycles. This might leave hardware resources underutilized and may lead to     
          less optimal performance. Out of the maximum of 8 warps per scheduler, this kernel allocates an average of    
          7.49 active warps per scheduler, but only an average of 1.31 warps were eligible per cycle. Eligible warps    
          are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible   
          warp results in no instruction being issued and the issue slot remains unused. To increase the number of      
          eligible warps, avoid possible load imbalances due to highly different execution durations per warp.          
          Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too.            

    Section: Warp State Statistics
    ---------------------------------------- ----------- ------------
    Metric Name                              Metric Unit Metric Value
    ---------------------------------------- ----------- ------------
    Warp Cycles Per Issued Instruction             cycle        21.72
    Warp Cycles Per Executed Instruction           cycle        21.72
    Avg. Active Threads Per Warp                                   32
    Avg. Not Predicated Off Threads Per Warp                    31.99
    ---------------------------------------- ----------- ------------

    OPT   Est. Speedup: 7.485%                                                                                          
          On average, each warp of this kernel spends 14.9 cycles being stalled waiting for the L1 instruction queue    
          for local and global (LG) memory operations to be not full. Typically, this stall occurs only when executing  
          local or global memory instructions extremely frequently. Avoid redundant global memory accesses. Try to      
          avoid using thread-local memory by checking if dynamically indexed arrays are declared in local scope, of if  
          the kernel has excessive register pressure causing by spills. If applicable, consider combining multiple      
          lower-width memory operations into fewer wider memory operations and try interleaving memory operations and   
          math instructions. This stall type represents about 68.6% of the total average of 21.7 cycles between         
          issuing two instructions.                                                                                     
    ----- --------------------------------------------------------------------------------------------------------------
    INF   Check the Warp Stall Sampling (All Samples) table for the top stall locations in your source based on         
          sampling data. The Kernel Profiling Guide                                                                     
          (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details    
          on each stall reason.                                                                                         

    Section: Instruction Statistics
    ---------------------------------------- ----------- ------------
    Metric Name                              Metric Unit Metric Value
    ---------------------------------------- ----------- ------------
    Avg. Executed Instructions Per Scheduler        inst 3,536,018.29
    Executed Instructions                           inst  198,017,024
    Avg. Issued Instructions Per Scheduler          inst 3,536,050.29
    Issued Instructions                             inst  198,018,816
    ---------------------------------------- ----------- ------------

    Section: Launch Statistics
    -------------------------------- --------------- ---------------
    Metric Name                          Metric Unit    Metric Value
    -------------------------------- --------------- ---------------
    Block Size                                                 1,024
    Function Cache Configuration                     CachePreferNone
    Grid Size                                                  1,024
    Registers Per Thread             register/thread              46
    Shared Memory Configuration Size           Kbyte           32.77
    Driver Shared Memory Per Block        byte/block               0
    Dynamic Shared Memory Per Block       byte/block               0
    Static Shared Memory Per Block        byte/block               0
    Threads                                   thread       1,048,576
    Waves Per SM                                               73.14
    -------------------------------- --------------- ---------------

    Section: Occupancy
    ------------------------------- ----------- ------------
    Metric Name                     Metric Unit Metric Value
    ------------------------------- ----------- ------------
    Block Limit SM                        block           16
    Block Limit Registers                 block            1
    Block Limit Shared Mem                block           16
    Block Limit Warps                     block            1
    Theoretical Active Warps per SM        warp           32
    Theoretical Occupancy                     %          100
    Achieved Occupancy                        %        93.52
    Achieved Active Warps Per SM           warp        29.93
    ------------------------------- ----------- ------------

    Section: Source Counters
    ------------------------- ----------- ------------
    Metric Name               Metric Unit Metric Value
    ------------------------- ----------- ------------
    Branch Instructions Ratio           %         0.01
    Branch Instructions              inst    2,162,688
    Branch Efficiency                   %          100
    Avg. Divergent Branches                          0
    ------------------------- ----------- ------------

